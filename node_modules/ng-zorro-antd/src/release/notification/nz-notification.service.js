var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { FloaterService } from '../core/floater';
import { NzMessageBaseService } from '../message/nz-message.service';
import { NzNotificationContainerComponent } from './nz-notification-container.component';
var NzNotificationService = (function (_super) {
    __extends(NzNotificationService, _super);
    function NzNotificationService(floaterService) {
        return _super.call(this, floaterService, NzNotificationContainerComponent, 'notification-') || this;
    }
    // Shortcut methods
    NzNotificationService.prototype.success = function (title, content, options) {
        return this.createMessage({ type: 'success', title: title, content: content }, options);
    };
    NzNotificationService.prototype.error = function (title, content, options) {
        return this.createMessage({ type: 'error', title: title, content: content }, options);
    };
    NzNotificationService.prototype.info = function (title, content, options) {
        return this.createMessage({ type: 'info', title: title, content: content }, options);
    };
    NzNotificationService.prototype.warning = function (title, content, options) {
        return this.createMessage({ type: 'warning', title: title, content: content }, options);
    };
    NzNotificationService.prototype.blank = function (title, content, options) {
        return this.createMessage({ type: 'blank', title: title, content: content }, options);
    };
    NzNotificationService.prototype.create = function (type, title, content, options) {
        return this.createMessage({ type: type, title: title, content: content }, options);
    };
    // For content with html
    NzNotificationService.prototype.html = function (html, options) {
        return this.createMessage({ html: html }, options);
    };
    return NzNotificationService;
}(NzMessageBaseService));
export { NzNotificationService };
NzNotificationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzNotificationService.ctorParameters = function () { return [
    { type: FloaterService, },
]; };
