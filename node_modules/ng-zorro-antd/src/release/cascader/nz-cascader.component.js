import { Component, ViewEncapsulation, Input, ChangeDetectorRef, ElementRef, Renderer2, HostListener, forwardRef, HostBinding, Output, EventEmitter, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, ENTER, } from '@angular/cdk';
var ESC = 27;
import { DropDownAnimation } from '../core/animation/dropdown-animations';
function noop() { }
function toArray(value) {
    var ret = value;
    if (value === undefined) {
        ret = [];
    }
    else if (!Array.isArray(value)) {
        ret = [value];
    }
    return ret;
}
function arrayEquals(array1, array2) {
    if (!array1 || !array2 || array1.length !== array2.length) {
        return false;
    }
    var len = array1.length;
    for (var i = 0; i < len; i++) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
var defaultDisplayRender = function (label) { return label.join(' / '); };
var NzCascaderComponent = (function () {
    function NzCascaderComponent(_elementRef, _render, _cdr) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._cdr = _cdr;
        this._prefixCls = 'ant-cascader';
        this._inputPrefixCls = 'ant-input';
        this._dropDownPosition = 'bottom';
        this._focused = false;
        this._popupVisible = false;
        this._displayLabelIsTemplate = false;
        this._displayLabelContext = {};
        this.__inputValue = '';
        // selection will trigger value change
        this._selectedOptions = [];
        // activaction will not triiger value change
        this._activatedOptions = [];
        // all data columns
        this._nzColumns = [];
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        /** Whether is disabled */
        this.nzDisabled = false;
        /** Input size, one of `large` `default` `small` */
        this.nzSize = 'default';
        /** Input placeholder */
        this.nzPlaceHolder = 'Please select';
        /** Whether show input box. Defaults to `true`. */
        this.nzShowInput = true;
        /** Whether can search. Defaults to `false`. */
        this.nzShowSearch = false;
        /** Whether allow clear. Defaults to `true`. */
        this.nzAllowClear = true;
        /** Hover text for the clear icon */
        this.nzClearText = 'Clear';
        /** Whether to show arrow */
        this.nzShowArrow = true;
        /** Specify content to show when no result matches. */
        this.nzNotFoundContent = 'Not Found';
        /** Whether cache children when they were loaded asych */
        this.nzEnableCache = true;
        /** Expand column item when click or hover, one of 'click' 'hover' */
        this.nzExpandTrigger = 'click';
        /** Change value on each selection if set to true */
        this.nzChangeOnSelect = false;
        /** Delay time to show when mouse enter, when `nzExpandTrigger` is `hover`. */
        this.nzMouseEnterDelay = 150; // ms
        /** Delay time to hide when mouse enter, when `nzExpandTrigger` is `hover`. */
        this.nzMouseLeaveDelay = 150; // ms
        /** Triggering mode: can be Array<'click'|'hover'> */
        this.nzTriggerAction = ['click'];
        /** Property name for getting `value` in the option */
        this.nzValueProperty = 'value';
        /** Property name for getting `label` in the option */
        this.nzLabelProperty = 'label';
        this.tabIndex = '0';
        /** Event: emit on popup show or hide */
        this.nzVisibleChange = new EventEmitter();
        /** Event: emit on values changed */
        this.nzChange = new EventEmitter();
        /** Event: emit on values and selection changed */
        this.nzSelectionChange = new EventEmitter();
        /**
         * Event: emit on option selected, event data：{option: any, index: number}
         */
        this.nzSelect = new EventEmitter();
        /**
         * Event: emit before loading children. event data：{option: any|null, index: number, resolve, reject}
         */
        this.nzLoad = new EventEmitter();
        /** Event: emit on the clear button clicked */
        this.nzClear = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    Object.defineProperty(NzCascaderComponent.prototype, "_inputValue", {
        get: function () {
            return this.__inputValue;
        },
        set: function (inputValue) {
            this.__inputValue = inputValue;
            if (inputValue.length) {
                this._addHostClass(this._prefixCls + "-picker-with-value");
            }
            else {
                this._removeHostClass(this._prefixCls + "-picker-with-value");
            }
        },
        enumerable: true,
        configurable: true
    });
    NzCascaderComponent.prototype.onPositionChange = function (position) {
        var _position = position.connectionPair.originY === 'bottom' ? 'bottom' : 'top';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    };
    NzCascaderComponent.prototype.nzFocus = function () {
        this._focused = true;
        this._addHostClass(this._prefixCls + "-focused");
    };
    NzCascaderComponent.prototype.nzBlur = function () {
        this._focused = false;
        this._removeHostClass(this._prefixCls + "-focused");
    };
    Object.defineProperty(NzCascaderComponent.prototype, "_pickerLabelCls", {
        get: function () {
            return _a = {},
                _a[this._prefixCls + "-picker-label"] = true,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzCascaderComponent.prototype, "_arrowCls", {
        get: function () {
            return _a = {},
                _a[this._prefixCls + "-picker-arrow"] = true,
                _a[this._prefixCls + "-picker-arrow-expand"] = this._popupVisible,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzCascaderComponent.prototype, "_clearCls", {
        get: function () {
            return _a = {},
                _a[this._prefixCls + "-picker-clear"] = true,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzCascaderComponent.prototype, "_inputCls", {
        get: function () {
            return _a = {},
                _a[this._prefixCls + "-input"] = 1,
                _a[this._inputPrefixCls + "-disabled"] = this.nzDisabled,
                _a[this._inputPrefixCls + "-lg"] = this.nzSize === 'large',
                _a[this._inputPrefixCls + "-sm"] = this.nzSize === 'small',
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzCascaderComponent.prototype, "_menuCls", {
        get: function () {
            return _a = {},
                _a[this._prefixCls + "-menus"] = true,
                _a[this._prefixCls + "-menus-hidden"] = !this._popupVisible,
                _a["" + this.nzPopupClassName] = this.nzPopupClassName,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzCascaderComponent.prototype, "_columnCls", {
        /** 获取菜单中列的样式 */
        get: function () {
            return _a = {},
                _a[this._prefixCls + "-menu"] = true,
                _a["" + this.nzColumnClassName] = this.nzColumnClassName,
                _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    /** 获取列中Option的样式 */
    NzCascaderComponent.prototype._getOptionCls = function (option, index) {
        return _a = {},
            _a[this._prefixCls + "-menu-item"] = true,
            _a[this._prefixCls + "-menu-item-expand"] = !option.isLeaf,
            _a[this._prefixCls + "-menu-item-active"] = this._isActiveOption(option, index),
            _a[this._prefixCls + "-menu-item-disabled"] = option.disabled,
            _a[this._prefixCls + "-menu-item-loading"] = option.loading,
            _a;
        var _a;
    };
    NzCascaderComponent.prototype._getLabel = function () {
        return this._displayLabelIsTemplate ? '' : this._displayLabel;
    };
    /** prevent input change event */
    NzCascaderComponent.prototype._handlerInputChange = function (event) {
        event.stopPropagation();
    };
    /** input blur */
    NzCascaderComponent.prototype._handleInputBlur = function (event) {
        if (!this.nzShowSearch) {
            return;
        }
        if (this._popupVisible) {
            this.nzFocus();
        }
        else {
            this.nzBlur();
        }
    };
    /** input focus */
    NzCascaderComponent.prototype._handleInputFocus = function (event) {
        if (!this.nzShowSearch) {
            return;
        }
        this.nzFocus();
    };
    /** input key down */
    NzCascaderComponent.prototype._handleInputKeyDown = function (event) {
    };
    NzCascaderComponent.prototype._setInputValue = function (inputValue, fireSearch) {
        if (fireSearch === void 0) { fireSearch = true; }
        if (inputValue !== this._inputValue) {
            this._inputValue = inputValue;
        }
    };
    NzCascaderComponent.prototype._hasInput = function () {
        return this._inputValue.length > 0;
    };
    NzCascaderComponent.prototype._hasSelection = function () {
        return this._selectedOptions.length > 0;
    };
    Object.defineProperty(NzCascaderComponent.prototype, "_showClearIcon", {
        /** Whether the clear button is visible */
        get: function () {
            var isSelected = this._hasSelection();
            var isHasInput = this._hasInput();
            return this.nzAllowClear && !this.nzDisabled && (isSelected || isHasInput);
        },
        enumerable: true,
        configurable: true
    });
    /** clear the input box and selected options */
    NzCascaderComponent.prototype._clearSelection = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this._displayLabel = '';
        this._displayLabelIsTemplate = false;
        this._selectedOptions = [];
        this._activatedOptions = [];
        this._setInputValue('', false);
        this.setPopupVisible(false);
        // trigger change event
        this._onValueChange();
    };
    Object.defineProperty(NzCascaderComponent.prototype, "_displayRender", {
        get: function () {
            return this.nzDisplayRender || defaultDisplayRender;
        },
        enumerable: true,
        configurable: true
    });
    NzCascaderComponent.prototype._buildDisplayLabel = function () {
        var _this = this;
        var selectedOptions = this._selectedOptions;
        var labels = selectedOptions.map(function (o) { return o[_this.nzLabelProperty || 'label']; });
        // 设置当前控件的显示值
        this._displayLabel = this._displayRender.call(this, labels, selectedOptions);
        this._displayLabelIsTemplate = !(typeof this._displayLabel === 'string');
        this._displayLabelContext = { labels: labels, selectedOptions: selectedOptions };
    };
    /** 由用户来定义点击后是否变更 */
    NzCascaderComponent.prototype._isChangeOn = function (option, index) {
        if (typeof this.nzChangeOn === 'function') {
            return this.nzChangeOn(option, index) === true;
        }
        return false;
    };
    NzCascaderComponent.prototype.onKeyDown = function (event) {
        var keyCode = event.keyCode;
        if (keyCode !== DOWN_ARROW &&
            keyCode !== UP_ARROW &&
            keyCode !== LEFT_ARROW &&
            keyCode !== RIGHT_ARROW &&
            keyCode !== ENTER &&
            keyCode !== BACKSPACE &&
            keyCode !== ESC) {
            return;
        }
        // Press any keys above to reopen menu
        if (!this._isPopupVisible() &&
            keyCode !== BACKSPACE &&
            keyCode !== ESC) {
            this.setPopupVisible(true);
            return;
        }
        // Press ESC to close menu
        if (keyCode === ESC) {
            this.setPopupVisible(false);
            return;
        }
        if (this._isPopupVisible()) {
            event.preventDefault();
            if (keyCode === DOWN_ARROW) {
                this._moveDown();
            }
            if (keyCode === UP_ARROW) {
                this._moveUp();
            }
            if (keyCode === LEFT_ARROW) {
                this._moveLeft();
            }
            if (keyCode === RIGHT_ARROW) {
                this._moveRight();
            }
        }
    };
    NzCascaderComponent.prototype._onTriggerClick = function (event) {
        if (this.nzDisabled) {
            return;
        }
        this.onTouched(); // set your control to 'touched'
        if (this._isClickTiggerAction()) {
            this._delaySetPopupVisible(!this._popupVisible, 100);
        }
    };
    NzCascaderComponent.prototype._onTriggerMouseEnter = function (event) {
        if (this.nzDisabled) {
            return;
        }
        if (this._isPointerTiggerAction()) {
            this._delaySetPopupVisible(true, this.nzMouseEnterDelay);
        }
    };
    NzCascaderComponent.prototype._onTriggerMouseLeave = function (event) {
        if (this.nzDisabled) {
            return;
        }
        if (!this._isPopupVisible()) {
            return;
        }
        if (this._isPointerTiggerAction()) {
            var currEl = this._el;
            var popupEl = this.menu && this.menu.nativeElement;
            if (currEl.contains(event.target) ||
                (popupEl && popupEl.contains(event.target))) {
                return; // 还在菜单内部
            }
            this._delaySetPopupVisible(false, this.nzMouseLeaveDelay);
        }
    };
    NzCascaderComponent.prototype._isClickTiggerAction = function () {
        if (typeof this.nzTriggerAction === 'string') {
            return this.nzTriggerAction === 'click';
        }
        return this.nzTriggerAction.indexOf('click') !== -1;
    };
    NzCascaderComponent.prototype._isPointerTiggerAction = function () {
        if (typeof this.nzTriggerAction === 'string') {
            return this.nzTriggerAction === 'hover';
        }
        return this.nzTriggerAction.indexOf('hover') !== -1;
    };
    NzCascaderComponent.prototype._closeMenu = function () {
        this._clearDelayTimer();
        this.setPopupVisible(false);
    };
    /**
     * 显示或者隐藏菜单
     *
     * @param visible true-显示，false-隐藏
     * @param delay 延迟时间
     */
    NzCascaderComponent.prototype._delaySetPopupVisible = function (visible, delay) {
        var _this = this;
        this._clearDelayTimer();
        if (delay) {
            this._delayTimer = setTimeout(function () {
                _this.setPopupVisible(visible);
                _this._clearDelayTimer();
            }, delay);
        }
        else {
            this.setPopupVisible(visible);
        }
    };
    NzCascaderComponent.prototype._isPopupVisible = function () {
        return this._popupVisible;
    };
    NzCascaderComponent.prototype.setPopupVisible = function (popupVisible) {
        if (this.nzDisabled) {
            return;
        }
        if (this._popupVisible !== popupVisible) {
            this._popupVisible = popupVisible;
            // We must listen to `mousedown` or `touchstart`, edge case:
            // https://github.com/ant-design/ant-design/issues/5804
            // https://github.com/react-component/calendar/issues/250
            // https://github.com/react-component/trigger/issues/50
            if (popupVisible) {
                if (!this._clickOutsideHandler) {
                    this._clickOutsideHandler = this._render.listen('document', 'mousedown', this._onDocumentClick.bind(this));
                }
                // always hide on mobile
                if (!this._touchOutsideHandler) {
                    this._touchOutsideHandler = this._render.listen('document', 'touchstart', this._onDocumentClick.bind(this));
                }
            }
            if (!popupVisible) {
                this._clearOutsideHandler();
            }
            if (popupVisible) {
                this._beforeVisible();
            }
            this.nzVisibleChange.emit(popupVisible);
        }
    };
    /** load init data if necessary */
    NzCascaderComponent.prototype._beforeVisible = function () {
        var _this = this;
        if (!this._nzColumns.length) {
            new Promise(function (resolve, reject) {
                _this.nzLoad.emit({
                    option: null,
                    index: -1,
                    resolve: resolve,
                    reject: reject
                });
            }).then(function (children) {
                _this._setColumnData(children, 0);
            }, function (reason) {
                // should not be here
            });
        }
    };
    NzCascaderComponent.prototype._onDocumentClick = function (event) {
        var target = event.target;
        var popupEl = this.menu && this.menu.nativeElement;
        if (!this._el.contains(target) && !popupEl.contains(target)) {
            this.setPopupVisible(false);
        }
    };
    NzCascaderComponent.prototype._clearOutsideHandler = function () {
        if (this._clickOutsideHandler) {
            this._clickOutsideHandler(); // Removes "listen" listener
            this._clickOutsideHandler = null;
        }
        if (this._touchOutsideHandler) {
            this._touchOutsideHandler(); // Removes "listen" listener
            this._touchOutsideHandler = null;
        }
    };
    NzCascaderComponent.prototype._clearDelayTimer = function () {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    };
    /** 获取Option的值，例如，可以指定labelProperty="name"来取Name */
    NzCascaderComponent.prototype._getOptionLabel = function (option) {
        return option[this.nzLabelProperty || 'label'];
    };
    /** 获取Option的值，例如，可以指定valueProperty="id"来取ID */
    NzCascaderComponent.prototype._getOptionValue = function (option) {
        return option[this.nzValueProperty || 'value'];
    };
    NzCascaderComponent.prototype._isActiveOption = function (option, index) {
        var activeOpt = this._activatedOptions[index];
        if (activeOpt === option) {
            return true;
        }
        if (activeOpt && this._getOptionValue(activeOpt) === this._getOptionValue(option)) {
            return true;
        }
        return false;
    };
    /**
     * 设置某列的激活的菜单选项
     *
     * @param option 菜单选项
     * @param index  选项所在的列组的索引
     */
    NzCascaderComponent.prototype._setActiveOption = function (option, index) {
        if (!option || option.disabled) {
            return;
        }
        this._activatedOptions[index] = option;
        // 当直接选择最后一级时，前面的选项要补全。例如，选择“城市”，则自动补全“国家”、“省份”
        for (var i = index - 1; i >= 0; i--) {
            if (!this._activatedOptions[i]) {
                this._activatedOptions[i] = this._activatedOptions[i + 1].parent;
            }
        }
        // 截断多余的选项，如选择“省份”，则只会有“国家”、“省份”，去掉“城市”、“区县”
        if (index < this._activatedOptions.length - 1) {
            this._activatedOptions = this._activatedOptions.slice(0, index + 1);
        }
        // trigger select event, and display label
        this._onSelectOption(option, index);
    };
    NzCascaderComponent.prototype._onSelectOption = function (option, index) {
        var _this = this;
        // trigger `nzSelect` event
        this.nzSelect.emit({
            option: option,
            index: index
        });
        // load children directly
        if (option.children && option.children.length) {
            option.isLeaf = false;
            option.children.forEach(function (child) { return child.parent = option; });
            this._setColumnData(option.children, index + 1);
        }
        else if (!option.isLeaf) {
            // load children async
            new Promise(function (resolve, reject) {
                _this.nzLoad.emit({
                    option: option,
                    index: index,
                    resolve: resolve,
                    reject: reject
                });
            }).then(function (children) {
                children.forEach(function (child) { return child.parent = option; });
                _this._setColumnData(children, index + 1);
                if (_this.nzEnableCache) {
                    option.children = children; // next time we load children directly
                }
            }, function (reason) {
                option.isLeaf = true;
            });
        }
        // 生成显示
        if (option.isLeaf || this.nzChangeOnSelect || this._isChangeOn(option, index)) {
            this._selectedOptions = this._activatedOptions;
            // 设置当前控件的显示值
            this._buildDisplayLabel();
            // 触发变更事件
            this._onValueChange();
        }
        // close menu if click on leaf
        if (option.isLeaf) {
            this._delaySetPopupVisible(false, this.nzMouseLeaveDelay);
        }
    };
    NzCascaderComponent.prototype._setColumnData = function (options, index) {
        if (!arrayEquals(this._nzColumns[index], options)) {
            this._nzColumns[index] = options;
            if (index < this._nzColumns.length - 1) {
                this._nzColumns = this._nzColumns.slice(0, index + 1);
            }
        }
    };
    /**
     * 鼠标点击选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    NzCascaderComponent.prototype._onOptionClick = function (option, index, event) {
        event.preventDefault();
        // Keep focused state for keyboard support
        this._el.focus();
        if (option && option.disabled) {
            return;
        }
        this._setActiveOption(option, index);
    };
    /**
     * press `up` or `down` arrow to select the sibling option.
     */
    NzCascaderComponent.prototype._moveUpOrDown = function (isUp) {
        var columnIndex = Math.max(this._activatedOptions.length - 1, 0);
        // 该组中已经被激活的选项
        var activeOption = this._activatedOptions[columnIndex];
        // 该组所有的选项，用于遍历获取下一个被激活的选项
        var options = this._nzColumns[columnIndex];
        if (!options || !options.length) {
            return;
        }
        var length = options.length;
        var nextOptIndex = -1;
        if (!activeOption) {
            nextOptIndex = isUp ? length : -1;
        }
        else {
            nextOptIndex = options.indexOf(activeOption);
        }
        while (true) {
            nextOptIndex = isUp ? nextOptIndex - 1 : nextOptIndex + 1;
            if (nextOptIndex < 0 || nextOptIndex >= length) {
                break;
            }
            var nextOption = options[nextOptIndex];
            if (!nextOption || nextOption.disabled) {
                continue;
            }
            this._setActiveOption(nextOption, columnIndex);
            break;
        }
    };
    NzCascaderComponent.prototype._moveUp = function () {
        this._moveUpOrDown(true);
    };
    NzCascaderComponent.prototype._moveDown = function () {
        this._moveUpOrDown(false);
    };
    /**
     * press `left` arrow to remove the last selected option.
     * If there is no option selected, emit `nzClear` event.
     */
    NzCascaderComponent.prototype._moveLeft = function () {
        var options = this._selectedOptions;
        if (options.length) {
            options.pop(); // Remove the last one
            var len = options.length;
            if (len) {
                this._setActiveOption(options[len - 1], len - 1);
            }
            else {
                this.nzClear.emit();
            }
        }
    };
    /**
     * press `right` arrow to select the next column option.
     */
    NzCascaderComponent.prototype._moveRight = function () {
        var columns = this._nzColumns;
        var length = this._selectedOptions.length;
        if (length === 0) {
            return;
        }
        var nextColIndex = length;
        var options = columns.length > nextColIndex ? columns[nextColIndex] : null;
        if (options) {
            var len = options.length;
            for (var i = 0; i < len; i++) {
                var activeOpt = options[i];
                if (activeOpt && !activeOpt.disabled) {
                    this._setActiveOption(activeOpt, nextColIndex);
                    return;
                }
            }
        }
    };
    /**
     * 鼠标划入选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    NzCascaderComponent.prototype._onOptionMouseEnter = function (option, index, event) {
        event.preventDefault();
        if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
            this._delaySelect(option, index, true);
        }
    };
    /**
     * 鼠标划出选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    NzCascaderComponent.prototype._onOptionMouseLeave = function (option, index, event) {
        event.preventDefault();
        if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
            this._delaySelect(option, index, false);
        }
    };
    NzCascaderComponent.prototype._delaySelect = function (option, index, doSelect) {
        var _this = this;
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
        if (doSelect) {
            this._delayTimer = setTimeout(function () {
                _this._setActiveOption(option, index);
                _this._delayTimer = null;
            }, 150);
        }
    };
    NzCascaderComponent.prototype._getSubmitValue = function () {
        var _this = this;
        var values = [];
        this._selectedOptions.forEach(function (option) {
            values.push(_this._getOptionValue(option));
        });
        return values;
    };
    NzCascaderComponent.prototype._onValueChange = function () {
        var value = this._getSubmitValue();
        if (!arrayEquals(this._lastValue, value)) {
            this._lastValue = value;
            this.onChange(value); // Angular need this
            if (value.length === 0) {
                this.nzClear.emit(); // first trigger `clear` and then `change`
            }
            this.nzSelectionChange.emit(this._selectedOptions);
            this.nzChange.emit(value);
        }
    };
    NzCascaderComponent.prototype._addHostClass = function (classname) {
        this._render.addClass(this._el, classname);
    };
    NzCascaderComponent.prototype._removeHostClass = function (classname) {
        this._render.removeClass(this._el, classname);
    };
    /**
     * Write a new value to the element.
     *
     * @Override (From ControlValueAccessor interface)
     */
    NzCascaderComponent.prototype.writeValue = function (value) {
        var _this = this;
        if (value == null) {
            return;
        }
        var array = [];
        toArray(value).forEach(function (v, index) {
            if (typeof v !== 'object') {
                var obj = {};
                obj[_this.nzValueProperty] = v;
                obj[_this.nzLabelProperty] = v;
                array[index] = obj;
            }
            else {
                array[index] = v;
            }
        });
        this._activatedOptions = array;
        this._selectedOptions = array;
        this._buildDisplayLabel();
    };
    NzCascaderComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NzCascaderComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NzCascaderComponent.prototype.ngOnInit = function () {
        // 设置第一列
        if (this.nzOptions && this.nzOptions.length) {
            this._nzColumns.push(this.nzOptions);
        }
    };
    NzCascaderComponent.prototype.ngOnDestroy = function () {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    };
    NzCascaderComponent.prototype.ngOnChanges = function (changes) {
        var nzDisabled = changes['nzDisabled'];
        if (nzDisabled) {
            if (nzDisabled.currentValue) {
                this._addHostClass(this._prefixCls + "-picker-disabled");
            }
            else {
                this._removeHostClass(this._prefixCls + "-picker-disabled");
            }
        }
    };
    NzCascaderComponent.prototype.ngAfterViewInit = function () {
        this._addHostClass(this._prefixCls);
        this._addHostClass(this._prefixCls + "-picker");
    };
    return NzCascaderComponent;
}());
export { NzCascaderComponent };
NzCascaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-cascader',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    DropDownAnimation
                ],
                template: "\n    <div\n      nz-overlay-origin\n      #origin=\"nzOverlayOrigin\"\n      #trigger\n    >\n      <div *ngIf=\"nzShowInput\">\n        <input #input\n          nz-input\n          [attr.autoComplete]=\"'off'\"\n          [attr.placeholder]=\"_hasInput() || _hasSelection() ? null : nzPlaceHolder\"\n          [readonly]=\"!nzShowSearch\"\n          [disabled]=\"nzDisabled\"\n          [nzSize]=\"nzSize\"\n          [ngClass]=\"_inputCls\"\n          [(ngModel)]=\"_inputValue\"\n          (blur)=\"_handleInputBlur($event)\"\n          (focus)=\"_handleInputFocus($event)\"\n          (keydown)=\"_handleInputKeyDown($event)\"\n          (change)=\"_handlerInputChange($event)\"\n        >\n        <i *ngIf=\"_showClearIcon\"\n          [class]=\"'anticon anticon-cross-circle'\"\n          [ngClass]=\"_clearCls\"\n          [attr.title]=\"nzClearText\"\n          (click)=\"_clearSelection($event)\"></i>\n        <i *ngIf=\"nzShowArrow\"\n          class=\"anticon anticon-down\"\n          [ngClass]=\"_arrowCls\"></i>\n        <span [ngClass]=\"_pickerLabelCls\">\n          <ng-container *ngIf=\"_displayLabelIsTemplate\">\n            <ng-container *ngTemplateOutlet=\"_displayLabel; context: _displayLabelContext\"></ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"!_displayLabelIsTemplate\">{{_displayLabel}}</ng-container>\n        </span>\n      </div>\n      <ng-content></ng-content>\n    </div>\n    <ng-template\n      nz-connected-overlay\n      hasBackdrop\n      [origin]=\"origin\"\n      (backdropClick)=\"_closeMenu()\"\n      (detach)=\"_closeMenu()\"\n      (positionChange)=\"onPositionChange($event)\"\n      [open]=\"_popupVisible\"\n    >\n      <div #menu\n        [ngClass]=\"_menuCls\"\n        [@dropDownAnimation]=\"_dropDownPosition\"\n      >\n        <ul *ngFor=\"let options of _nzColumns; let i = index;\"\n          [ngClass]=\"_columnCls\"\n          [attr.data-key]=\"i\">\n          <li *ngFor=\"let option of options\"\n            [attr.data-key]=\"_getOptionValue(option)\"\n            [attr.title]=\"option.title || _getOptionLabel(option)\"\n            [ngClass]=\"_getOptionCls(option, i)\"\n            (mouseenter)=\"_onOptionMouseEnter(option, i, $event)\"\n            (mouseleave)=\"_onOptionMouseLeave(option, i, $event)\"\n            (click)=\"_onOptionClick(option, i, $event)\"\n          >\n            {{_getOptionLabel(option)}}\n          </li>\n        </ul>\n      </div>\n    </ng-template>\n  ",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return NzCascaderComponent; }),
                        multi: true
                    }
                ],
                styles: [
                    "/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */\n/* stylelint-disable declaration-bang-space-before */\n/* stylelint-disable declaration-bang-space-before */\n.ant-cascader {\n  font-size: 12px;\n}\n.ant-cascader-input.ant-input {\n  background-color: transparent !important;\n  cursor: pointer;\n  width: 100%;\n  display: block;\n}\n.ant-cascader-picker {\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n  font-size: 12px;\n  background-color: #fff;\n  border-radius: 4px;\n  outline: 0;\n}\n.ant-cascader-picker-with-value .ant-cascader-picker-label {\n  color: transparent;\n}\n.ant-cascader-picker-disabled {\n  cursor: not-allowed;\n  background: #f7f7f7;\n  color: rgba(0, 0, 0, 0.25);\n}\n.ant-cascader-picker-disabled .ant-cascader-input {\n  cursor: not-allowed;\n}\n.ant-cascader-picker:focus .ant-cascader-input {\n  border-color: #49a9ee;\n  outline: 0;\n  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);\n}\n.ant-cascader-picker-label {\n  position: absolute;\n  left: 0;\n  height: 20px;\n  line-height: 20px;\n  top: 50%;\n  margin-top: -10px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  width: 100%;\n  padding: 0 12px 0 8px;\n}\n.ant-cascader-picker-clear {\n  opacity: 0;\n  position: absolute;\n  right: 8px;\n  z-index: 2;\n  background: #fff;\n  top: 50%;\n  font-size: 12px;\n  color: rgba(0, 0, 0, 0.25);\n  width: 12px;\n  height: 12px;\n  margin-top: -6px;\n  line-height: 12px;\n  cursor: pointer;\n  transition: color 0.3s ease, opacity 0.15s ease;\n}\n.ant-cascader-picker-clear:hover {\n  color: rgba(0, 0, 0, 0.43);\n}\n.ant-cascader-picker:hover .ant-cascader-picker-clear {\n  opacity: 1;\n}\n.ant-cascader-picker-arrow {\n  position: absolute;\n  z-index: 1;\n  top: 50%;\n  right: 8px;\n  width: 12px;\n  height: 12px;\n  margin-top: -6px;\n  line-height: 12px;\n  color: rgba(0, 0, 0, 0.43);\n  display: inline-block;\n  font-size: 12px;\n  font-size: 9px 9;\n  transform: scale(0.75) rotate(0deg);\n  /* IE6-IE8 */\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)\";\n  zoom: 1;\n}\n:root .ant-cascader-picker-arrow {\n  filter: none;\n}\n:root .ant-cascader-picker-arrow {\n  font-size: 12px;\n}\n.ant-cascader-picker-arrow:before {\n  transition: transform 0.2s ease;\n}\n.ant-cascader-picker-arrow.ant-cascader-picker-arrow-expand {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n}\n.ant-cascader-picker-arrow.ant-cascader-picker-arrow-expand:before {\n  transform: rotate(180deg);\n}\n.ant-cascader-menus {\n  font-size: 12px;\n  background: #fff;\n  position: absolute;\n  z-index: 1050;\n  border-radius: 4px;\n  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);\n  white-space: nowrap;\n}\n.ant-cascader-menus-empty,\n.ant-cascader-menus-hidden {\n  display: none;\n}\n.ant-cascader-menus.slide-up-enter.slide-up-enter-active.ant-cascader-menus-placement-bottomLeft,\n.ant-cascader-menus.slide-up-appear.slide-up-appear-active.ant-cascader-menus-placement-bottomLeft {\n  animation-name: antSlideUpIn;\n}\n.ant-cascader-menus.slide-up-enter.slide-up-enter-active.ant-cascader-menus-placement-topLeft,\n.ant-cascader-menus.slide-up-appear.slide-up-appear-active.ant-cascader-menus-placement-topLeft {\n  animation-name: antSlideDownIn;\n}\n.ant-cascader-menus.slide-up-leave.slide-up-leave-active.ant-cascader-menus-placement-bottomLeft {\n  animation-name: antSlideUpOut;\n}\n.ant-cascader-menus.slide-up-leave.slide-up-leave-active.ant-cascader-menus-placement-topLeft {\n  animation-name: antSlideDownOut;\n}\n.ant-cascader-menu {\n  display: inline-block;\n  vertical-align: top;\n  min-width: 111px;\n  height: 180px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  border-right: 1px solid #e9e9e9;\n  overflow: auto;\n}\n.ant-cascader-menu:first-child {\n  border-radius: 4px 0 0 4px;\n}\n.ant-cascader-menu:last-child {\n  border-right-color: transparent;\n  margin-right: -1px;\n  border-radius: 0 4px 4px 0;\n}\n.ant-cascader-menu:only-child {\n  border-radius: 4px;\n}\n.ant-cascader-menu-item {\n  padding: 7px 8px;\n  cursor: pointer;\n  white-space: nowrap;\n  transition: all 0.3s;\n}\n.ant-cascader-menu-item:hover {\n  background: #ecf6fd;\n}\n.ant-cascader-menu-item-disabled {\n  cursor: not-allowed;\n  color: rgba(0, 0, 0, 0.25);\n}\n.ant-cascader-menu-item-disabled:hover {\n  background: transparent;\n}\n.ant-cascader-menu-item-active:not(.ant-cascader-menu-item-disabled),\n.ant-cascader-menu-item-active:not(.ant-cascader-menu-item-disabled):hover {\n  background: #f7f7f7;\n  font-weight: bold;\n}\n.ant-cascader-menu-item-expand {\n  position: relative;\n}\n.ant-cascader-menu-item-expand:after {\n  font-family: 'anticon';\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  content: \"\\e61f\";\n  display: inline-block;\n  font-size: 12px;\n  font-size: 8px 9;\n  transform: scale(0.66666667) rotate(0deg);\n  /* IE6-IE8 */\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)\";\n  zoom: 1;\n  color: rgba(0, 0, 0, 0.43);\n  position: absolute;\n  right: 8px;\n}\n:root .ant-cascader-menu-item-expand:after {\n  filter: none;\n}\n:root .ant-cascader-menu-item-expand:after {\n  font-size: 12px;\n}\n.ant-cascader-menu-item-loading:after {\n  font-family: 'anticon';\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  content: \"\\e64d\";\n  animation: loadingCircle 1s infinite linear;\n}\n.ant-cascader-menu-item .ant-cascader-menu-item-keyword {\n  color: #f04134;\n}\n",
                    "/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */\n/* stylelint-disable declaration-bang-space-before */\n/* stylelint-disable declaration-bang-space-before */\n.ant-cascader {\n  display: block;\n}\n.ant-cascader-menus {\n  top: 100%;\n  left: 0;\n  position: relative;\n  width: 100%;\n  margin-top: 4px;\n  margin-bottom: 4px;\n}\n"
                ]
            },] },
];
/** @nocollapse */
NzCascaderComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
]; };
NzCascaderComponent.propDecorators = {
    'nzDisabled': [{ type: Input },],
    'nzSize': [{ type: Input },],
    'nzPlaceHolder': [{ type: Input },],
    'nzShowInput': [{ type: Input },],
    'nzShowSearch': [{ type: Input },],
    'nzAllowClear': [{ type: Input },],
    'nzClearText': [{ type: Input },],
    'nzShowArrow': [{ type: Input },],
    'nzNotFoundContent': [{ type: Input },],
    'nzPopupClassName': [{ type: Input },],
    'nzColumnClassName': [{ type: Input },],
    'nzOptions': [{ type: Input },],
    'nzEnableCache': [{ type: Input },],
    'nzExpandTrigger': [{ type: Input },],
    'nzChangeOnSelect': [{ type: Input },],
    'nzChangeOn': [{ type: Input },],
    'nzMouseEnterDelay': [{ type: Input },],
    'nzMouseLeaveDelay': [{ type: Input },],
    'nzTriggerAction': [{ type: Input },],
    'nzDisplayRender': [{ type: Input },],
    'nzValueProperty': [{ type: Input },],
    'nzLabelProperty': [{ type: Input },],
    'menu': [{ type: ViewChild, args: ['menu',] },],
    'tabIndex': [{ type: HostBinding, args: ['attr.tabIndex',] },],
    'nzVisibleChange': [{ type: Output },],
    'nzChange': [{ type: Output },],
    'nzSelectionChange': [{ type: Output },],
    'nzSelect': [{ type: Output },],
    'nzLoad': [{ type: Output },],
    'nzClear': [{ type: Output },],
    'onKeyDown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    '_onTriggerClick': [{ type: HostListener, args: ['click', ['$event'],] },],
    '_onTriggerMouseEnter': [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    '_onTriggerMouseLeave': [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
};
