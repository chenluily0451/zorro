import { Component, Input, ViewEncapsulation, ViewChild, HostListener } from '@angular/core';
import { NzSliderComponent } from './nz-slider.component';
var NzSliderHandleComponent = (function () {
    function NzSliderHandleComponent(_slider) {
        this._slider = _slider;
        this.style = {};
    }
    Object.defineProperty(NzSliderHandleComponent.prototype, "nzActive", {
        set: function (show) {
            if (this.tooltip) {
                if (show) {
                    this.tooltip.show();
                }
                else {
                    this.tooltip.hide();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    NzSliderHandleComponent.prototype.ngOnInit = function () {
    };
    NzSliderHandleComponent.prototype.ngOnChanges = function (changes) {
        if (changes.nzOffset) {
            this._updateStyle();
        }
        if (changes.nzValue) {
            this._updateTooltipTitle(); // [For tooltip]
            this._updateTooltipPosition(); // [For tooltip]
        }
    };
    // Hover to toggle tooltip when not dragging
    NzSliderHandleComponent.prototype.onMouseEnter = function ($event) {
        if (!this._slider.isDragging) {
            this.nzActive = true;
        }
    };
    NzSliderHandleComponent.prototype.onMouseLeave = function ($event) {
        if (!this._slider.isDragging) {
            this.nzActive = false;
        }
    };
    NzSliderHandleComponent.prototype._updateTooltipTitle = function () {
        this.tooltipTitle = this.nzTipFormatter ? this.nzTipFormatter(this.nzValue) : this.nzValue;
    };
    NzSliderHandleComponent.prototype._updateTooltipPosition = function () {
        var _this = this;
        if (this.tooltip) {
            window.setTimeout(function () { return _this.tooltip.updatePosition(); }, 0); // MAY use ngAfterViewChecked? but this will be called so many times.
        }
    };
    NzSliderHandleComponent.prototype._updateStyle = function () {
        this.style[this.nzVertical ? 'bottom' : 'left'] = this.nzOffset + "%";
    };
    return NzSliderHandleComponent;
}());
export { NzSliderHandleComponent };
NzSliderHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-handle',
                encapsulation: ViewEncapsulation.None,
                template: "\n    <nz-tooltip *ngIf=\"nzTipFormatter !== null\" #tooltip [nzTitle]=\"tooltipTitle\" [nzTrigger]=\"null\">\n      <div nz-tooltip [class]=\"nzClassName\" [ngStyle]=\"style\"></div>\n    </nz-tooltip>\n    <div *ngIf=\"nzTipFormatter === null\" [class]=\"nzClassName\" [ngStyle]=\"style\"></div>\n  "
            },] },
];
/** @nocollapse */
NzSliderHandleComponent.ctorParameters = function () { return [
    { type: NzSliderComponent, },
]; };
NzSliderHandleComponent.propDecorators = {
    'nzClassName': [{ type: Input },],
    'nzVertical': [{ type: Input },],
    'nzOffset': [{ type: Input },],
    'nzValue': [{ type: Input },],
    'nzTipFormatter': [{ type: Input },],
    'nzActive': [{ type: Input },],
    'tooltip': [{ type: ViewChild, args: ['tooltip',] },],
    'onMouseEnter': [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    'onMouseLeave': [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
};
