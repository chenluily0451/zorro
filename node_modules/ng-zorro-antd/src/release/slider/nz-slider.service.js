import { Injectable } from '@angular/core';
var NzSliderService = (function () {
    function NzSliderService() {
    }
    NzSliderService.prototype.pauseEvent = function (e) {
        e.stopPropagation();
        e.preventDefault();
    };
    NzSliderService.prototype.getPrecision = function (num) {
        var numStr = num.toString(), dotIndex = numStr.indexOf('.');
        return dotIndex >= 0 ? numStr.length - dotIndex - 1 : 0;
    };
    NzSliderService.prototype.cloneArray = function (arr) {
        return arr.slice();
    };
    NzSliderService.prototype.isNotTouchEvent = function (e) {
        return !e.touches || e.touches.length > 1 ||
            (e.type.toLowerCase() === 'touchend' && e.touches.length > 0);
    };
    // convert value to offset in percent
    NzSliderService.prototype.valueToOffset = function (min, max, value) {
        return (value - min) / (max - min) * 100;
    };
    NzSliderService.prototype.correctNumLimit = function (num, min, max) {
        if (isNaN(num = +num)) {
            return min;
        }
        if (num < min) {
            num = min;
        }
        else if (num > max) {
            num = max;
        }
        return num;
    };
    /**
     * get the offset of an element relative to the document (Reference from jquery's offset())
     * @param elem HTMLElement ref
     */
    NzSliderService.prototype.getElementOffset = function (elem) {
        // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
        // Support: IE <=11 only
        // Running getBoundingClientRect on a
        // disconnected node in IE throws an error
        if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
        }
        // Get document-relative position by adding viewport scroll to viewport-relative gBCR
        var rect = elem.getBoundingClientRect(), win = elem.ownerDocument.defaultView;
        return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
        };
    };
    return NzSliderService;
}());
export { NzSliderService };
NzSliderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzSliderService.ctorParameters = function () { return []; };
