import { Injectable, Inject, Optional, SkipSelf } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Floater } from './floater';
import { Overlay } from '../overlay';
Injectable();
var FloaterService = (function () {
    function FloaterService(_overlay, _document) {
        this._overlay = _overlay;
        this._document = _document;
        // console.log('[FloaterService] constructed once.');
    }
    FloaterService.prototype.create = function (strategyType, content, viewContainerRef, strategyOptions, options) {
        options = Object.assign(options || {}, {
            content: content,
            viewContainerRef: viewContainerRef,
            positionStrategyType: strategyType,
            positionStrategyOptions: strategyOptions
        });
        return new Floater(this._overlay, this._document, options);
    };
    FloaterService.prototype.createConnected = function (content, viewContainerRef, strategyOptions, options) {
        return this.create('connected', content, viewContainerRef, strategyOptions, options);
    };
    FloaterService.prototype.createFree = function (content, viewContainerRef, strategyOptions, options) {
        return this.create('free', content, viewContainerRef, strategyOptions, options);
    };
    /**
     * Persistently create/initialize a Component and append it's DOM to body(under overlay)
     * NOTE: the attaching operation is persistent, means that it is no methods to detach the component while attached (no relative resources can be released), SO take care of using it!
     * @param component Component class
     * @param viewContainerRef Container reference that component will created and append to
     * @param injector Injector that will be used while creating component dynamically
     * @return Instance of the component
     */
    FloaterService.prototype.persistAttachComponent = function (component, viewContainerRef, injector) {
        return this.createFree(component, viewContainerRef, null, {
            injector: injector,
            persist: true
        }).attach().getComponentInstance();
    };
    return FloaterService;
}());
export { FloaterService };
/** @nocollapse */
FloaterService.ctorParameters = function () { return [
    { type: Overlay, },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
]; };
export function FLOATER_SERVICE_PROVIDER_FACTORY(overlay, doc, floaterService) {
    return floaterService || new FloaterService(overlay, doc);
}
export var FLOATER_SERVICE_PROVIDER = {
    provide: FloaterService,
    useFactory: FLOATER_SERVICE_PROVIDER_FACTORY,
    deps: [Overlay, DOCUMENT, [new Optional(), new SkipSelf(), FloaterService]]
};
