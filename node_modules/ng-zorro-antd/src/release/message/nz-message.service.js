var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { FloaterService } from '../core/floater';
import { NzMessageContainerComponent } from './nz-message-container.component';
var NzMessageBaseService = (function () {
    function NzMessageBaseService(floaterService, containerClass, _idPrefix) {
        if (_idPrefix === void 0) { _idPrefix = ''; }
        this._idPrefix = _idPrefix;
        this._counter = 0; // Id counter for messages
        this._container = floaterService.persistAttachComponent(containerClass);
    }
    NzMessageBaseService.prototype.remove = function (messageId) {
        if (messageId) {
            this._container.removeMessage(messageId);
        }
        else {
            this._container.removeMessageAll();
        }
    };
    NzMessageBaseService.prototype.createMessage = function (message, options) {
        var resultMessage = Object.assign(message, {
            messageId: this._generateMessageId(),
            options: options,
            createdAt: new Date()
        });
        this._container.createMessage(resultMessage);
        return resultMessage;
    };
    NzMessageBaseService.prototype._generateMessageId = function () {
        return this._idPrefix + this._counter++;
    };
    return NzMessageBaseService;
}());
export { NzMessageBaseService };
var NzMessageService = (function (_super) {
    __extends(NzMessageService, _super);
    function NzMessageService(floaterService) {
        return _super.call(this, floaterService, NzMessageContainerComponent, 'message-') || this;
    }
    // Shortcut methods
    NzMessageService.prototype.success = function (content, options) {
        return this.createMessage({ type: 'success', content: content }, options);
    };
    NzMessageService.prototype.error = function (content, options) {
        return this.createMessage({ type: 'error', content: content }, options);
    };
    NzMessageService.prototype.info = function (content, options) {
        return this.createMessage({ type: 'info', content: content }, options);
    };
    NzMessageService.prototype.warning = function (content, options) {
        return this.createMessage({ type: 'warning', content: content }, options);
    };
    NzMessageService.prototype.loading = function (content, options) {
        return this.createMessage({ type: 'loading', content: content }, options);
    };
    NzMessageService.prototype.create = function (type, content, options) {
        return this.createMessage({ type: type, content: content }, options);
    };
    // For content with html
    NzMessageService.prototype.html = function (html, options) {
        return this.createMessage({ html: html }, options);
    };
    return NzMessageService;
}(NzMessageBaseService));
export { NzMessageService };
NzMessageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzMessageService.ctorParameters = function () { return [
    { type: FloaterService, },
]; };
